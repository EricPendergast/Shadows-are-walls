Player movement
    ✓- Implement player with basic right/left/jump
    - Make player jump height more predictable
    - Make player jump height depend on how long the spacebar is pressed

Lights
    - Single light
        ✓- Frustrum clipping
        ✓- mesh drawing
        ✓- Fix the bug where theres an error every time the number of vertices changes
    - Shadow intersections with multiple lights
        ✓- Make a Shadow class, which is created whenever an opaque line segment enters the view of a light
        ~- Make a centralized class to calculate shadow intersections
        - Make opaque objects only generate one shadow each
        ✓- Make it so shadow edges can be created by anything, not just opaque objects
    ✓- Update ShadowEdge
        ✓- Make Math.MinimalUnion retain the correspondence between trimmedShadows and shadowsIn
        ✓- Make it so shadow edges are only created if they survive trimming
            ✓- Pass in left and right edges
    - More ShadowEdge
        - Make it so adjacent colliders are merged into one (prevents objects from "tripping" on flat looking surfaces)
    ✓- Make shadows (kind of) render with pure gizmos
    - Find a way to draw the triangles with borders, because in some cases there is a 1 pixel gap between them
    - Collision boxes
    - Moving collision boxes

    - Lights need to have their data (position & rotation)  depend on their special shadow edges


Optimizations
    - Put everything on the stack
    - For each shadow edge, only check for intersections with other lights
          which intersect its own light
    - For each shadow edge, you only need to check if one of the sides is in
          light, since you know one side is always in light
    - To check if a point is in the light, you can use binary search for each light

Bugs
    - Setting the scale of an opaque object to 0 and then back to a nonzero
      value causes an error in FixedLight.OnCollisionEnter()
    ✓- Lights are a bit buggy on the first frame
    ✓- Lights special shadow edges don't move with the light properly
    ✓- Light edges aren't getting their targets set correctly; they are too
      long. This sometimes causes them to think they should be disabled in the
      wrong situations
    ✓- ShadowEdges & LightEdges don't update their colliders when they are
      initialized. They do it only during FixedUpdate, which is called after
      the frame they are initialized

Possible things to do:
    Idea: Make shadow edges have a bunch of small colliders, so that there
        aren't torque bounciness problems

        This would be nontrivial to implement; make sure pros and cons are weighed

    Mqybe we don't need to pass in the illuminated side of each shadow edge; we
    can just check if the midpoint is illuminated by a light other than its
    source light. There are some problematic edge cases with this approach
    though. Specifically, if two lights are illuminating the same surface.
